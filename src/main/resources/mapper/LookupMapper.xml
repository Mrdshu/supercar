<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.xw.supercar.entity.Lookup">
	<resultMap id="resultMap" type="com.xw.supercar.entity.Lookup">
		<result property="id" column="ID" />
		<result property="parentId" column="LK_PARENT_ID" />
		<result property="definitionId" column="LKD_ID" />
		<result property="code" column="LK_CODE" />
		<result property="value" column="LK_VALUE" />
		<result property="additional" column="LK_ADDITIONAL" />
		<result property="description" column="LK_DESCRIPTION"/>
		<result property="zzLevel" column="LK_LEVEL" />
		<result property="zzIsLeaf" column="LK_IS_LEAF" />
		<result property="zzLevel1Id" column="LK_LEVEL1_ID" />
		<result property="zzLevel2Id" column="LK_LEVEL2_ID" />
		<result property="zzLevel3Id" column="LK_LEVEL3_ID" />
		<result property="zzLevel4Id" column="LK_LEVEL4_ID" />
		<result property="zzLevel5Id" column="LK_LEVEL5_ID" />
		<result property="zzLevel6Id" column="LK_LEVEL6_ID" />
	</resultMap>

	<sql id="table">TB_LOOKUP</sql>
	<sql id="columns">ID,LK_PARENT_ID,LKD_ID,LK_CODE,LK_VALUE,LK_ADDITIONAL,LK_DESCRIPTION,LK_LEVEL,LK_IS_LEAF,LK_LEVEL1_ID,LK_LEVEL2_ID,LK_LEVEL3_ID,LK_LEVEL4_ID,LK_LEVEL5_ID,LK_LEVEL6_ID</sql>
	<sql id="set">
		<trim suffixOverrides=",">
			<if test="parentId != null">LK_PARENT_ID = <choose><when test="parentId == ''">null</when><otherwise>#{parentId}</otherwise></choose>,</if>
			<if test="code != null">LK_CODE = <choose><when test="code == ''">null</when><otherwise>#{code}</otherwise></choose>,</if>
			<if test="value != null">LK_VALUE = <choose><when test="value == ''">null</when><otherwise>#{value}</otherwise></choose>,</if>
			<if test="additional != null">LK_ADDITIONAL = <choose><when test="additional == ''">null</when><otherwise>#{additional}</otherwise></choose>,</if>
			<if test="description != null">LK_DESCRIPTION = <choose><when test="description == ''">null</when><otherwise>#{description}</otherwise></choose>,</if>
			<if test="zzLevel != null">LK_LEVEL = #{zzLevel},</if>
			<if test="zzIsLeaf != null">LK_IS_LEAF = #{zzIsLeaf},</if>
			<if test="zzLevel1Id != null">LK_LEVEL1_ID = <choose><when test="zzLevel1Id == ''">null</when><otherwise>#{zzLevel1Id}</otherwise></choose>,</if>
			<if test="zzLevel2Id != null">LK_LEVEL2_ID = <choose><when test="zzLevel2Id == ''">null</when><otherwise>#{zzLevel2Id}</otherwise></choose>,</if>
			<if test="zzLevel3Id != null">LK_LEVEL3_ID = <choose><when test="zzLevel3Id == ''">null</when><otherwise>#{zzLevel3Id}</otherwise></choose>,</if>
			<if test="zzLevel4Id != null">LK_LEVEL4_ID = <choose><when test="zzLevel4Id == ''">null</when><otherwise>#{zzLevel4Id}</otherwise></choose>,</if>
			<if test="zzLevel5Id != null">LK_LEVEL5_ID = <choose><when test="zzLevel5Id == ''">null</when><otherwise>#{zzLevel5Id}</otherwise></choose>,</if>
			<if test="zzLevel6Id != null">LK_LEVEL6_ID = <choose><when test="zzLevel6Id == ''">null</when><otherwise>#{zzLevel6Id}</otherwise></choose>,</if>
		</trim>
	</sql>
	<sql id="whereEntity">
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="id != null">AND ID = #{id}</if>
			<if test="parentId != null">AND LK_PARENT_ID = #{parentId}</if>
			<if test="definitionId != null">AND LKD_ID = #{definitionId}</if>
			<if test="code != null">AND LK_CODE = #{code}</if>
			<if test="value != null">AND LK_VALUE = #{value}</if>
		</trim>
	</sql>
	<sql id="whereFilter">
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="filter != null">
				<if test="filter.id_eq != null">AND ID = #{filter.id_eq}</if>
				<if test="filter.id_ne != null">AND ID != #{filter.id_ne}</if>
				<if test="filter.id_in != null">AND <foreach item="ii" collection="filter.id_in" open="(" separator=" OR " close=")">ID in <foreach item="i" collection="ii" open="(" separator="," close=")">#{i}</foreach></foreach></if>
				<if test="filter.id_notIn != null">AND <foreach item="ii" collection="filter.id_notIn" open="(" separator=" AND " close=")">ID not in <foreach item="i" collection="ii" open="(" separator="," close=")">#{i}</foreach></foreach></if>
				<if test="filter.parentId_eq != null">AND LK_PARENT_ID = #{filter.parentId_eq}</if>
				<if test="filter.parentId_ne != null">AND LK_PARENT_ID != #{filter.parentId_ne}</if>
				<if test="filter.parentId_in != null">AND <foreach item="ii" collection="filter.parentId_in" open="(" separator=" OR " close=")">LK_PARENT_ID in <foreach item="i" collection="ii" open="(" separator="," close=")">#{i}</foreach></foreach></if>
				<if test="filter.parentId_notIn != null">AND (LK_PARENT_ID IS NULL OR <foreach item="ii" collection="filter.parentId_notIn" open="(" separator=" AND " close=")">LK_PARENT_ID not in <foreach item="i" collection="ii" open="(" separator="," close=")">#{i}</foreach></foreach>)</if>
				<if test="filter.parentId_isNull != null">AND LK_PARENT_ID IS NULL</if>
				<if test="filter.parentId_isNotNull != null">AND LK_PARENT_ID IS NOT NULL</if>
				<if test="filter.definitionId_eq != null">AND LKD_ID = #{filter.definitionId_eq}</if>
				<if test="filter.code_eq != null">AND LK_CODE = #{filter.code_eq}</if>
				<if test="filter.code_ne != null">AND LK_CODE != #{filter.code_ne}</if>
				<if test="filter.code_like != null">AND lower(LK_CODE) LIKE lower(#{filter.code_like})</if>
				<if test="filter.code_notLike != null">AND lower(LK_CODE) NOT LIKE lower(#{filter.code_notLike})</if>
				<if test="filter.code_in != null">AND <foreach item="ii" collection="filter.code_in" open="(" separator=" OR " close=")">LK_CODE in <foreach item="i" collection="ii" open="(" separator="," close=")">#{i}</foreach></foreach></if>
				<if test="filter.code_notIn != null">AND (LK_CODE IS NULL OR <foreach item="ii" collection="filter.code_notIn" open="(" separator=" AND " close=")">LK_CODE not in <foreach item="i" collection="ii" open="(" separator="," close=")">#{i}</foreach></foreach>)</if>
				<if test="filter.value_eq != null">AND LK_VALUE = #{filter.value_eq}</if>
				<if test="filter.value_ne != null">AND LK_VALUE != #{filter.value_ne}</if>
				<if test="filter.value_like != null">AND lower(LK_VALUE) LIKE lower(#{filter.value_like})</if>
				<if test="filter.value_notLike != null">AND lower(LK_VALUE) NOT LIKE lower(#{filter.value_notLike})</if>
				<if test="filter.value_isNull != null">AND LK_VALUE IS NULL</if>
				<if test="filter.value_isNotNull != null">AND LK_VALUE IS NOT NULL</if>
				<if test="filter.zzLevel_eq != null">AND LK_LEVEL = #{filter.zzLevel_eq}</if>
				<if test="filter.zzLevel_lte != null">AND LK_LEVEL &lt;= #{filter.zzLevel_lte}</if>
				<if test="filter.zzLevel_gte != null">AND LK_LEVEL &gt;= #{filter.zzLevel_gte}</if>
				<if test="filter.zzIsLeaf_eq != null">AND LK_IS_LEAF = #{filter.zzIsLeaf_eq}</if>
				<if test="filter.zzLevel1Id_eq != null">AND LK_LEVEL1_ID = #{filter.zzLevel1Id_eq}</if>
				<if test="filter.zzLevel1Id_in != null">AND <foreach item="ii" collection="filter.zzLevel1Id_in" open="(" separator=" OR " close=")">LK_LEVEL1_ID in <foreach item="i" collection="ii" open="(" separator="," close=")">#{i}</foreach></foreach></if>
				<if test="filter.zzLevel2Id_eq != null">AND LK_LEVEL2_ID = #{filter.zzLevel2Id_eq}</if>
				<if test="filter.zzLevel2Id_in != null">AND <foreach item="ii" collection="filter.zzLevel2Id_in" open="(" separator=" OR " close=")">LK_LEVEL2_ID in <foreach item="i" collection="ii" open="(" separator="," close=")">#{i}</foreach></foreach></if>
				<if test="filter.zzLevel3Id_eq != null">AND LK_LEVEL3_ID = #{filter.zzLevel3Id_eq}</if>
				<if test="filter.zzLevel3Id_in != null">AND <foreach item="ii" collection="filter.zzLevel3Id_in" open="(" separator=" OR " close=")">LK_LEVEL3_ID in <foreach item="i" collection="ii" open="(" separator="," close=")">#{i}</foreach></foreach></if>
				<if test="filter.zzLevel4Id_eq != null">AND LK_LEVEL4_ID = #{filter.zzLevel4Id_eq}</if>
				<if test="filter.zzLevel4Id_in != null">AND <foreach item="ii" collection="filter.zzLevel4Id_in" open="(" separator=" OR " close=")">LK_LEVEL4_ID in <foreach item="i" collection="ii" open="(" separator="," close=")">#{i}</foreach></foreach></if>
				<if test="filter.zzLevel5Id_eq != null">AND LK_LEVEL5_ID = #{filter.zzLevel5Id_eq}</if>
				<if test="filter.zzLevel5Id_in != null">AND <foreach item="ii" collection="filter.zzLevel5Id_in" open="(" separator=" OR " close=")">LK_LEVEL5_ID in <foreach item="i" collection="ii" open="(" separator="," close=")">#{i}</foreach></foreach></if>
				<if test="filter.zzLevel6Id_eq != null">AND LK_LEVEL6_ID = #{filter.zzLevel6Id_eq}</if>
				<if test="filter.zzLevel6Id_in != null">AND <foreach item="ii" collection="filter.zzLevel6Id_in" open="(" separator=" OR " close=")">LK_LEVEL6_ID in <foreach item="i" collection="ii" open="(" separator="," close=")">#{i}</foreach></foreach></if>
				<if test="filter.zzParentIds_eq != null">AND (LK_LEVEL1_ID = #{filter.zzParentIds_eq} OR LK_LEVEL2_ID = #{filter.zzParentIds_eq} OR LK_LEVEL3_ID = #{filter.zzParentIds_eq} OR LK_LEVEL4_ID = #{filter.zzParentIds_eq} OR LK_LEVEL5_ID = #{filter.zzParentIds_eq} OR LK_LEVEL6_ID = #{filter.zzParentIds_eq})</if>
			</if>
		</trim>
	</sql>
	<sql id="where">
		<trim prefix="WHERE " prefixOverrides="AND |OR ">
			<trim prefixOverrides="WHERE ">
				<include refid="whereEntity" />
			</trim>
			<trim prefix="AND " prefixOverrides="WHERE ">
				<include refid="whereFilter" />
			</trim>
		</trim>
	</sql>
	<sql id="sort">
		<if test="sort == null" >
			ORDER BY LK_CODE ASC
		</if>
		<if test="sort != null" >
			<trim prefix="ORDER BY " suffixOverrides=",">
				<foreach collection="sort" index="key" item="val">
					<if test="key == 'code'">LK_CODE ${val},</if>
					<if test="key == 'value'">LK_VALUE ${val},</if>
				</foreach>
			</trim>
		</if>
	</sql>

	<insert id="insert">
		INSERT INTO <include refid="table" /> (
			<include refid="columns" />
		) VALUES (
			<trim suffixOverrides=",">
				<choose><when test="id == ''">null</when><otherwise>#{id}</otherwise></choose>, 
				<choose><when test="parentId == ''">null</when><otherwise>#{parentId}</otherwise></choose>, 
				<choose><when test="definitionId == ''">null</when><otherwise>#{definitionId}</otherwise></choose>, 
				<choose><when test="code == ''">null</when><otherwise>#{code}</otherwise></choose>, 
				<choose><when test="value == ''">null</when><otherwise>#{value}</otherwise></choose>, 
				<choose><when test="additional == ''">null</when><otherwise>#{additional}</otherwise></choose>, 
				<choose><when test="description == ''">null</when><otherwise>#{description}</otherwise></choose>, 
				#{zzLevel},
				#{zzIsLeaf},
				<choose><when test="zzLevel1Id == ''">null</when><otherwise>#{zzLevel1Id}</otherwise></choose>,
				<choose><when test="zzLevel2Id == ''">null</when><otherwise>#{zzLevel2Id}</otherwise></choose>,
				<choose><when test="zzLevel3Id == ''">null</when><otherwise>#{zzLevel3Id}</otherwise></choose>,
				<choose><when test="zzLevel4Id == ''">null</when><otherwise>#{zzLevel4Id}</otherwise></choose>,
				<choose><when test="zzLevel5Id == ''">null</when><otherwise>#{zzLevel5Id}</otherwise></choose>,
				<choose><when test="zzLevel6Id == ''">null</when><otherwise>#{zzLevel6Id}</otherwise></choose>,
			</trim>
		)
	</insert>

	<update id="update">
		UPDATE <include refid="table" /> SET <include refid="set" /> WHERE ID = #{id}
		<if test="@Ognl@isMap(_parameter)">
			<trim prefix="AND " prefixOverrides="WHERE ">
				<include refid="whereFilter" />
			</trim>
		</if>
	</update>

	<delete id="delete">
		DELETE FROM <include refid="table" /> 
		WHERE ID = #{id}
	</delete>
	
	<select id="unique" resultType="long">
		SELECT count(ID) FROM <include refid="table" />
		INNER JOIN (
			SELECT ID AS ID__ FROM <include refid="table" />
		 	<where>1=2
				<if test="code != null and code != ''">OR lower(LK_CODE) = lower(#{code})</if>
				<if test="value != null and value != ''">OR LK_VALUE = #{value}</if>
			</where>
			) T on ID = T.ID__ 
		<where>
			<if test="id != null and id != ''">AND ID != #{id}</if>
			<if test="definitionId != null and definitionId != ''">AND LKD_ID = #{definitionId}</if>
		</where>
	</select>

	<select id="selectBy" resultMap="resultMap">
		SELECT <include refid="columns" />FROM <include refid="table" />
		<include refid="where"/> <include refid="sort" />
	</select>
	
	<select id="countBy" resultType="long">
		SELECT count(ID) FROM <include refid="table" />
		<include refid="where" />
	</select>

	<update id="updateBy">
		UPDATE <include refid="table" /> SET <include refid="set" />
		<include refid="whereFilter" />
	</update>

	<delete id="deleteBy">
		DELETE FROM <include refid="table" /> 
		<include refid="where"/>
	</delete>
</mapper>

